info:
  description: |-
    ### Сервис по заливке данных в базу - пришедших из кафки (1с)

    Получает данные из очереди кафки и сохраняет в базе.
    Данные могут придти частично, например только остатки или только характеристики. В этом случае данные по товару будут дополняться в базе

    Структура данных из кафки:
    ```
    {
    ~-~"id": "id", // guid
    ~-~"type": 1, // тип из 1с (пока не понятно какие значения будут)
    ~-~"parent_id": "parent_id", // guid родительского товара
    ~-~"is_group": false, // показатель группы товаров
    ~-~"code": "code", // код из 1с
    ~-~"name": "name", // наименование
    ~-~"price": 12.43, // розничная цена
    ~-~"barcodes": [ // Штрих коды
    ~-~~-~{
    ~-~~-~~-~~-~"type": "ean", // тип штрих кода
    ~-~~-~~-~~-~"barcode": "1223423", // значение штрих кода
    ~-~~-~}
    ~-~],
    ~-~"quantities": [ // данные по остаткам
    ~-~~-~{
    ~-~~-~~-~"warehouse_id": "warehouse_id", // guid склада
    ~-~~-~~-~"diff": 3, // изменение количества остатка в этом складе. Если продали товар то значение будет "-1"
    ~-~~-~~-~"value": 10, // текущее фактическое значение остатка в этом складе
    ~-~~-~~-~"reserve_diff": 3, // изменение количества резерва в этом складе
    ~-~~-~~-~"reserve_value": 10 // текущее фактическое значение резерва в этом складе.
    ~-~~-~}
    ~-~],
    ~-~"properties": [ // характеристики товара
    ~-~~-~{
    ~-~~-~~-~"parentType": "parentType" // тип родителя, может и не быть этого поля
    ~-~~-~~-~"type": "type" // тип, пример "_Бренд"
    ~-~~-~~-~"value": "value" // тип, пример "ASUS"
    ~-~~-~}
    ~-~],
    ~-~"accessories": [ // аксессуары к товару
    ~-~~-~{
    ~-~~-~~-~"id": "id" // id
    ~-~~-~~-~"count": 7 // количество
    ~-~~-~}
    ~-~]
    }
    ```
  title: Raw-product-consumer
paths: {}
swagger: "2.0"
